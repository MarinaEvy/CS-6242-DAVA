

```{r}
df_movies = df[df$Type == "movie", ] 
cat(" The dataset had", dim(df)[1], "rows before removing rows whose Type is not a movie. The dataset now has", dim(df_movies)[1], "rows after removing rows whose Type is not a movie.", "This means I have removed", (dim(df)[1] - dim(df_movies)[1]), "rows", end="\n", file="")
```

```{r}
#TODO: Replace df$Runtime with a numeric column containing the runtime in minutes
runtime_string = as.data.frame(t(as.data.frame(strsplit(df_movies$Runtime, " "))))
rownames(runtime_string) = seq(1, nrow(runtime_string), 1)
runtime_string[, c('V1', 'V3')] = suppressWarnings(lapply(lapply(runtime_string[,c('V1','V3')],as.character), as.numeric))
hours_2_mins = runtime_string[runtime_string$V2 == 'h', 1]*60 + runtime_string[runtime_string$V2 == 'h', 3]
runtime_string[runtime_string$V2 == 'h', 1] = hours_2_mins
df_movies$Runtime2 = runtime_string[, 1]
df_movies = df_movies[, !(names(df_movies) %in% 'Runtime')]
colnames(df_movies)[ncol(df_movies)] = 'Runtime'
df = df_movies
rm(runtime_string)
rm(hours_2_mins)
rm(df_movies)
cat("The minimum Runtime is ", min(df$Runtime, na.rm = TRUE), "\nThe maximum Runtime", max(df$Runtime, na.rm = TRUE), "\nThe mean of Runtime", mean(df$Runtime, na.rm = TRUE), "\nThe median Runtime", median(df$Runtime, na.rm = TRUE),  end="\n", file="")
```

Now investigate the distribution of `Runtime` values and how it changes over years (variable `Year`, which you can bucket into decades) and in relation to the budget (variable `Budget`). Include any plots that illustrate.

TODO: Investigate the distribution of Runtime values and how it varies by Year and Budget
First I will discretize the Year column into bins
#bin the Year variable into decades
```{r}
# TODO: Investigate the distribution of Runtime values and how it varies by Year and Budget
#bin the year variable into decades - This code will create bins and assign the rows into their associated bins
bin_count = round((max(df$Year, na.rm = TRUE) - min(df$Year, na.rm = TRUE))/10, 1)
bin_ID = cut(df$Year, bin_count, labels=FALSE)
df$bin_ID = bin_ID
```

First get an overall distribution
```{r}
#get the overall distribution of the Runtime variable
hist(df$Runtime, breaks = 34, main = 'Overall distribution of Runtime', col = 'light blue', probability = TRUE)
cat("The overall distribution of Runtime shows that the majority of the movies have a Runtime betwen 80 minutes to 100 minutes.", file = "")
```

We will we will plot the first 5 decades, then the second 5 decades, and then the last 3 decades
```{r}
# first five decades - between 1888 and 1918
ggplot(data = df[df$bin_ID<6, ], aes(x = Runtime, y = ..density.., color = bin_ID )) + geom_histogram(binwidth = 1.8) + facet_grid(. ~ bin_ID) + geom_density() + labs(title = "Histograms of Runtime by decade between 1888 and 1918", x ='runtme', y = 'prob density') + xlim(0, 150)
cat("It is difficult to observe what is going on with the distribution because of the first 2 decades.", file = "")
```

it seems that first 2 decades distort the graph, as there were not a lot of movies in these decades and the movies were way too short. We will plot the last three decades of the first five decades
```{r}
# Runtime between 1908 and 1938 (3rd, 4th, and 5th decades)
ggplot(data = df[df$bin_ID<6 & df$bin_ID>2, ], aes(x = Runtime, y = ..density.., color = bin_ID )) + geom_histogram(binwidth = 5) + facet_grid(. ~ bin_ID) + geom_density() + labs(title = "Histograms of Runtime by decade between 1908 and 1938", x ='runtme', y = 'prob density') + xlim(0, 150)
cat("According to the Runtime distributions by Year, it is seen that these distributions are bimodel. In early decades, movies are shorter, such as below 20 minutes. After 1928, we see an increase in long movies.", file = "")
```

We will plot the Runtime of movies filmed between 1938 and 1988 (the second 5 decades)
```{r}
# Runtime of second five decades between 1938 and 1988 
ggplot(data = df[df$bin_ID>5 & df$bin_ID<11 , ], aes(x = Runtime, y = ..density.., color = bin_ID )) + geom_histogram(binwidth = 20) + facet_grid(. ~ bin_ID) + geom_density() + labs(title = "Histograms of Runtime by decade between 1938 and 1988", x ='runtme', y = 'prob density') + xlim(0, 200)
cat("It is seen that movies are getting longer overtime, and the runtime distributions look more like the Norrmal distribution. The majority of the movies have a Runtime between 80 minutes and 110 minutes after the eighth decade.", file = "")
```

We will plot the Runtime of movies filmed between the last three decades
```{r}
# Runtime of last three decades between 1988 and 2018
ggplot(data = df[df$bin_ID>10 , ], aes(x = Runtime, y = ..density.., color = bin_ID )) + geom_histogram(binwidth = 20) + facet_grid(. ~ bin_ID) + geom_density() + labs(title = "Histograms of Runtime by decade between 1988 and 2018", x ='runtme', y = 'prob density') + xlim(0, 220)
cat("After 1988s, we see that the distribution of the runtime is the Normal Distribution where the Runtime is centered around 100 minutes. This is a symetric distribution. The majority of the movies last between 80 to 120 minutes.", file = "")
```

This will give the overall distribution of the Runtime by 13 decades
```{r}
# boxplots of Runtime by decade (overall distribution)
ggplot(data = df, aes(x = as.factor(bin_ID), y = log(Runtime), colour = bin_ID)) + geom_boxplot() + labs(title = "Boxplots of log (Runtime) by decades", x ='decades between 1888 - 2018', y = 'log(Runtime)')
cat("These boxplots prove that the Runtime of the movies have increased from 1888 to until 1958. After the 7th decade, the mean Runtime stays almost the same. We also see that there are a lot of outlier Runtimes after the 7th decade. This is probably due to the fact that after 1960s, people filmed very short movies, as well as very long ones. ", file = "")
```

This will give how Budget of the movies have changed over the decades
```{r}
#  analyze the relationship with budget
ggplot(data = df, aes(x = as.factor(bin_ID), y = log(Budget), colour = bin_ID)) + geom_boxplot() + labs(title = "Boxplots of log (Budget) by decades", x ='decades between 1888 - 2018', y = 'log(Budget)')
cat("It is seen that there is a relationship between Budget and Years. The film industry started spending more money in movies overtime. However, there are outlier movies whose budget is very low in recent decades. Probably, these are low budget art movies.", file = "")
```


Three way relationship between Runtime, Budget, and Year - We will not include the first three decades as we do not have reliable Budget values for these decades.
```{r}
# between 1908 and 1938
ggplot(data = df[df$bin_ID<6 & df$bin_ID>2, ], aes(x = Runtime, y = Budget, color = bin_ID)) + geom_point() +
  facet_grid(.~bin_ID) + 
  labs(title = "scatter plots of Runtime vs. Budget by decades between 1908 and 1938", x = 'Runtime', y = 'Budget')
cat("as we have very limited amount of data, it is not possible to give a reliable interpretation.", file = "")
Runtime = df$Runtime
Runtime[is.na(Runtime)] = mean(Runtime, na.rm=T) 
Budget = df$Budget
Budget[is.na(Budget)] = mean(Budget, na.rm=T) 
```


```{r}
# between 1938 and 1988
ggplot(data = df[df$bin_ID>5 & df$bin_ID<11 , ], aes(x = log(Runtime), y = log(Budget), color = bin_ID)) + geom_point() +
  facet_grid(.~bin_ID) + xlim(2,6) +
  labs(title = "scatter plots of log(Runtime) vs. log(Budget) by decades between 1938 and 1988", x = 'Runtime', y = 'Budget')
cat("It seems that there is a very very slight relationship between the budget and Runtime. I do not expect a very strong relationship between the Runtime and Budget. I think Budget is mainly impacted by the actors in the movie not by the Runtime.", file = "" )
```

```{r}
# between 1988 and 2018
ggplot(data = df[df$bin_ID>10 , ], aes(x = log(Runtime), y = log(Budget), color = bin_ID)) + geom_point() +
  facet_grid(.~bin_ID) + xlim(2, 6) + 
  labs(title = "scatter plots of Runtime vs. Budget by decades between 1988 and 2018", x = 'Runtime', y = 'Budget')
cat("Again, it is hard to say that there is a correlation between the budget and Runtime", file = " ")
cat ("overall correlation between Runtime and Budget is, which provess that these two variables are not correlated", cor(Budget, Runtime), file ="")
rm(list=setdiff(ls(), "df"))
df = df[, 1:(ncol(df)-1)] #drop the bin_ID variable
```

The overall distribution of Runtime shows that majority of the movies have a Runtime betwen 80 minutes to 100 minutes. In early decades, movies are shorter, such as below 20 minutes. After 1928, we see an increase in long movies. It is seen that movies are getting longer overtime, and the runtime distributions look more like the Norrmal distribution. The mojority of the movies have a Runtime between 80 minutes and 110 minutes in the tenth decade. The Runtime of the movies have increased from 1888 to until 1958. After the 7th decade, the mean Runtime stays almost the same. We also see that there are a lot of outlier Runtimes after the 7th decade. This is probably due to the fact that after 1960s, people filmed very short movies, as well as very long ones. It is seen that there is a relationship between Budget and Years. The film industry started spending more money in movies overtime. However, there are outlier movies whose budget is very low in recent decades. Probably, these are low budget art movies. It is hard to say that there is a correlation between the budget and Runtime. "overall correlation between Runtime and Budget is 0.054, which is very low. 


## 3. Encode `Genre` column

The column `Genre` represents a list of genres associated with the movie in a string format. Write code to parse each text string into a binary vector with 1s representing the presence of a genre and 0s the absence, and add it to the dataframe as additional columns. Then remove the original `Genre` column.

For example, if there are a total of 3 genres: Drama, Comedy, and Action, a movie that is both Action and Comedy should be represented by a binary vector <0, 1, 1>. Note that you need to first compile a dictionary of all possible genres and then figure out which movie has which genres (you can use the R `tm` package to create the dictionary).

```{r}
# TODO: Replace Genre with a collection of binary columns
genre_no_comma = strsplit(df$Genre, ",")
corp = Corpus(VectorSource(genre_no_comma))
dtm = DocumentTermMatrix(corp)
df_genre = as.data.frame(as.matrix(dtm))
df = cbind(df, df_genre)
df = df[, !(names(df) %in% 'Genre')]
rm(list = setdiff(ls(), "df"))
```

Plot the relative proportions of movies having the top 10 most common genres.
```{r}
# TODO: Select movies from top 10 most common genres and plot their relative proportions
Genre = df[,which(colnames(df)=="action"):length(df)]
Genre_Table = as.data.frame(table(melt(Genre))[,2])
Genre_Table$Genre = rownames(Genre_Table)
rownames(Genre_Table) = seq(1, nrow(Genre_Table), 1)
Genre_Table <- Genre_Table[order(-Genre_Table[,1]),] 
colnames(Genre_Table)[1] = 'Count'
ten_common_genre = Genre_Table[1:10, ]
barplot(ten_common_genre[,1]/sum(ten_common_genre[,1]), main="Relative proportions of movies having the top 10 most common genres", names.arg=ten_common_genre[,2], cex.names=0.8, ylab="Relative proportions", col = 'light pink', las=2)
cat("It is seen that the most 10 common Genres are", file ="")
rs = paste("\"", ten_common_genre$Genre,"\"",collapse=", ",sep="")
cat("It is seen that the most 10 common Genres are", rs, file ="")
```

Examine how the distribution of `Runtime` changes across genres for the top 10 most common genres.

```{r}
# TODO: Plot Runtime distribution for top 10 most common genres
Genre = df[,which(colnames(df)=="action"):length(df)]
Genre$Runtime = df$Runtime
runtime_genre = melt(Genre, id = 'Runtime')
runtime_genre = runtime_genre[runtime_genre$value == 1, ]
runtime_genre = runtime_genre[which(runtime_genre$variable %in% ten_common_genre$Genre), ]
ggplot(data = runtime_genre , aes(x = variable, y = log(Runtime), colour = variable)) + geom_boxplot() + 
  labs(title = "Boxplots of Runtime by Genre", y = 'log(Runtime)')
```

The most common Genres are drama, commedy,and short. It is seen that animation and short films have much lower Runtime as compared to other Genres.The mean Runtime of Documentary genre is slightly below the remaining Genres.  The mean Runtime of other Genres are almost equal. It is expected that the most common Genre is Drama. It is also expected that animation and short movies have less Runtime.  


## 4. Eliminate mismatched rows

The dataframe was put together by merging two different sources of data and it is possible that the merging process was inaccurate in some cases (the merge was done based on movie title, but there are cases of different movies with the same title). The first source’s release time was represented by the column `Year` (numeric representation of the year) and the second by the column `Released` (string representation of release date).

Find and remove all rows where you suspect a merge error occurred based on a mismatch between these two variables. To make sure subsequent analysis and modeling work well, avoid removing more than 10% of the rows that have a `Gross` value present.

```{r}
# TODO: Remove rows with Released-Year mismatch
released_year = as.data.frame(t(as.data.frame(strsplit(as.character(df$Released), "-"))))
rownames(released_year) = seq(1, nrow(released_year), 1)
df$bolean_year = as.numeric((df$Year == released_year$V1))
df[is.na(df$bolean_year), 'bolean_year'] = 1
df$bolean_gross = df$Gross
df[!(is.na(df$bolean_gross)), 'bolean_gross'] = 1
df[(is.na(df$bolean_gross)), 'bolean_gross'] = 0
selection = !(df$bolean_year==0 & df$bolean_gross==0)
a = df[selection,]
a = a[!(a$Gross==0 & a$bolean_year==0),]
a$probs = 1000
a[a$bolean_year == 0,'probs'] = runif(table(a$bolean_year == 0)[2], min = 0, max = 1)
selection2 = (a$probs>0.58)
a = a[selection2, ]
a = a[ , !(names(a) %in% c('bolean_year', 'bolean_gross','probs'))]
cat("The number of total rows removed is", (nrow(df) - nrow(a)), file = "")
df = a
remove(a)
```

I first extract the year from the Released variable. Then I remove rows in stages. In the first stage, I remove the rows where Gross is NA and there is a mismatch between the Year variable and the Released_year variable. Now, the the remaining mismatches will have a Gross value. So I can remove all of them as I will end up removing more than 10% of the rows that have a Gross value. What I do is I create uniform numbers between 0 and 1 and assign it to rows where there is a mismatch. Then I remove some percentage of the mismatches in a way that I will not remove more than 10% of the rows that has a Gross value. This just randomizes the remove process and reduce the bias that might be introduced during elimination. Overall, I removed 5434 rows. 

## 5. Explore `Gross` revenue

For the commercial success of a movie, production houses want to maximize Gross revenue. Investigate if Gross revenue is related to Budget, Runtime or Genre in any way.

Note: To get a meaningful relationship, you may have to partition the movies into subsets such as short vs. long duration, or by genre, etc.

```{r}
# TODO: Investigate if Gross Revenue is related to Budget, Runtime or Genre
# according to runtime distribution, I will divide the runtime by three sets. Short movies, are the movies whose duration is below the first quartile. Normal length movies are within the first and third quartile. Long movies are above the third quartile.
q = quantile(df$Runtime, na.rm = TRUE)
q=unname(q)
df$bin_ID = 0
df[(df$Runtime<=q[2] & !is.na(df$Runtime)), 'bin_ID' ] = 1
df[(df$Runtime>q[2] & df$Runtime<=(q[3] +20)  & !is.na(df$Runtime)), 'bin_ID' ] = 2
df[(df$Runtime>(q[3] +20) & !is.na(df$Runtime)), 'bin_ID' ] = 3
```

```{r}
# Relationship between Gross and Budget for short movies
ggplot(data = df[df$bin_ID == 1, ], aes(x = Budget, y = Gross, color = bin_ID)) + geom_point() + labs(title = "Scatter plots of Gross vs. Budget by length of movies", x = 'budget', y = 'Gross')
```

```{r}
# Relationship between Gross and Budget for medium length movies
ggplot(data = df[df$bin_ID == 2, ], aes(x = log(Budget), y = log(Gross), color = bin_ID)) + geom_point() + labs(title = "scatter plots of Gross vs. Budget by length of movies", x = 'log(budget)', y = 'log(Gross)')
cat("it is seen that there is a positive correlation between budget and gross", file = "")
```

```{r}
# Relationship between Gross and Budget for medium long movies
ggplot(data = df[df$bin_ID == 3, ], aes(x = log(Budget), y = log(Gross), color = bin_ID)) + geom_point() + labs(title = "scatter plots of Gross vs. Budget by length of movies", x = 'log(budget)', y = 'log(Gross)')
cat("it is seen that there is a positive correlation between budget and gross", file = "")
```

```{r}
# Let's investigate the relationship between Gross and Genre
Genre = df[,which(colnames(df)=="action"):length(df)]
Genre$Gross = df$Gross
gross_genre = melt(Genre, id = 'Gross')
gross_genre = gross_genre[gross_genre$value == 1, ]
gross_genre = gross_genre[which(gross_genre$variable %in% ten_common_genre$Genre), ]
ggplot(data = gross_genre , aes(x = variable, y = log(Gross), colour = variable)) + geom_boxplot() + 
  labs(title = "Boxplots of Gross by Genre", y = 'log(Gross)')

```



```{r}
Gross = df$Gross
Gross[is.na(Gross)] = mean(Gross, na.rm=T) 
Budget = df$Budget
Budget[is.na(Budget)] = mean(Budget, na.rm=T) 
cat ("overall correlation between Gross and Budget is",cor(Budget, Gross), "which provess that these two variables are not correlated", file ="")
rm(list=setdiff(ls(), c("df", "ten_common_genre")))
df = df[, 1:(ncol(df)-1)]
```

It seems that the higher the budget, the higher the Gross is. So if a company spends more mony on a movie, it is likely that they will make more money. The correlation coefficient between Budget and Gross is 0.74, which is high. It is also seen action, adventure, and animation movies bring more Gross income as compared the other movies because their means are greater than the means of Gross income of other Genres. It I also seen that Documentary does not bring much Gross income. Animation brings the highest Gross. Action and Adventure also brings high Gross. No surprise why producers love to make Marvel movies. 


```{r}
# TODO: Investigate if Gross Revenue is related to Release Month
released_year = as.data.frame(t(as.data.frame(strsplit(as.character(df$Released), "-"))))
rownames(released_year) = seq(1, nrow(released_year), 1)
df$month = as.factor((released_year$V2))
df_new = df[!is.na(df$month), ]
ggplot(data = df_new , aes(x = month, y = log(Gross), colour = month)) + geom_boxplot() + 
  labs(title = "Boxplots of Gross by Genre", y = 'log(Gross)')
cat("it is seen that movies August and September make slighly less money. Movies released in November and December make slightly more money. However, there is no so significant difference between Gross revenue of the movies and their released month.", file = "")
rm(list=setdiff(ls(), c("df", "ten_common_genre")))
df = df[, 1:(ncol(df)-1)]
```


## 6. Process `Awards` column

The variable `Awards` describes nominations and awards in text format. Convert it to 2 numeric columns, the first capturing the number of wins, and the second capturing nominations. Replace the `Awards` column with these new columns, and then study the relationship of `Gross` revenue with respect to them.

Note that the format of the `Awards` column is not standard; you may have to use regular expressions to find the relevant values. Try your best to process them, and you may leave the ones that don't have enough information as NAs or set them to 0s.

```{r}
# TODO: Convert Awards to 2 numeric columns: wins and nominations
x = cSplit(df, "Awards", " ")
x$Awards = df$Awards
x$Win = 'N/A'
x$Nomination = 'N/A'
x[grep("^[W|w]+", x$Awards_02, value=FALSE), 'Awards_02'] = as.factor('win')
x[grep("^[Ww]", x$Awards_01, value=FALSE), 'Awards_01'] = as.factor('win')
x[grep("nom+", x$Awards_02, value=FALSE), 'Awards_02'] = as.factor('nomination')
x[grep("Nom+", x$Awards_01, value=FALSE), 'Awards_01'] = as.factor('nomination')
x[x$Awards_02 == 'win', 'Win'] = x[x$Awards_02 == 'win', 'Awards_01']
x[x$Awards_02 == 'nomination', 'Nomination'] = x[x$Awards_02 == 'nomination', 'Awards_01']
x[x$Awards_01 == 'win', 'Win'] = x[x$Awards_01 == 'win', 'Awards_02']
x[x$Awards_01 == 'nomination', 'Nomination'] = x[x$Awards_01 == 'nomination', 'Awards_03']
x[grep("nom+", x$Awards_05, value=FALSE), 'Awards_05'] = as.factor('nomination')
x[x$Awards_05 == 'nomination', 'Nomination'] = x[x$Awards_05 == 'nomination', 'Awards_04']
x[x$Awards_02 == 'for', 'Nomination'] = x[x$Awards_02 == 'for', 'Awards_03']
x$Win2 = 'N/A'
x$Nomination2 = 'N/A'
x[x$Awards_05 == 'Another', 'Win2'] = x[x$Awards_05 == 'Another', 'Awards_06']
x[x$Awards_04 == 'Another', 'Win2'] = x[x$Awards_04 == 'Another', 'Awards_05']
x[x$Awards_05 == 'Another', 'Nomination2'] = x[x$Awards_05 == 'Another', 'Awards_09']
x[x$Awards_04 == 'Another', 'Nomination2'] = x[x$Awards_04 == 'Another', 'Awards_08']

x$Win = as.numeric(x$Win)
x$Win2 = as.numeric(x$Win2)
x$Nomination = as.numeric(x$Nomination)
x$Nomination2 = as.numeric(x$Nomination2)

x[is.na(x$Win), 'Win'] = 0
x[is.na(x$Win2), 'Win2'] = 0
x[is.na(x$Nomination), 'Nomination'] = 0
x[is.na(x$Nomination2), 'Nomination2'] = 0


x$Win = x$Win +x$Win2
x$Nomination = x$Nomination + x$Nomination2

x = within(x, rm('Awards_01', 'Awards_02', 'Awards_03', 'Awards_04', 'Awards_05', 'Awards_06', 
                  'Awards_07', 'Awards_08','Awards_09', 'Awards_10', 'Awards_11', 'Awards_12', 
                  'Win2','Nomination2'))

df = x
rm(list=setdiff(ls(), c("df", "ten_common_genre")))

```

I split the awards column into subcharacters. Then, I check the regular expression that are commonly seen in the variable. Such as one common style was: "5 wins & 4 nominations". So I subsetted the rows in a way that if "Award_02" column has wins, the number of wins will be 5. 
If "Award_4"has nominations, the number of nominations will be 4. I did that for all the splitted characters and add the "Wins" and "Nominations" up for each row. 
Example: 28 wins & 3 nominations - you  will bring 28 wins in the Wins column and 3 nominations in Nominations columns. You can see this by typing df[df$Title=="Black", 'Win'] and df[df$Title=="Black", 'Nomination']
Nominated for 1 Oscar. Another 3 wins & 10 nomination. This will have 3 wins and 11 nominations. You can see this by typing df[df$Title=="Enron: The Smartest Guys in the Room", 'Win'] and df[df$Title=="Enron: The Smartest Guys in the Room", 'Nomination']


```{r}
# TODO: Plot Gross revenue against wins and nominations
ggplot(data = df, aes(x = Nomination, y = Gross^0.5)) + geom_point() + xlim(1, 50) + ylim(10000, 40000) + labs(title = "Nomination vs Gross", x ='Nomination', y = 'Gross')
cor(df[complete.cases(df), c("Gross", "Nomination")])
ggplot(data = df, aes(x = Win, y = Gross^0.5)) + geom_point() + xlim(1, 50) + ylim(10000, 40000) + labs(title = "Win vs Gross", x ='Win', y = 'Gross')

cat("The correlation between Gross revenue and the number of Nominations is", cor(df[complete.cases(df), c("Gross", "Nomination")])[1,2], "\nThe correlation between Gross revenue and the number of Wins is", cor(df[complete.cases(df), c("Gross", "Win")])[1,2], file = "")

```

I was expecting a higher correlation between Gross and Noinations and Wins. There is still a correlation between the number of Wins and Gross variable. This correlation is around 0.30, which is not very strong. So, I would say The number of awards and Gross are correlated; however the correlation is not very strong (not above 0.5). The same interpretation applies to the correlation and relationship between Gross and Nomination. The correlation is 0.34. We can say that there is slight relationship between Gross, Awards, and Nominations. Note that there were NA variables. If we did not have a lot of missing values, This interpretation might have been different. 


## 7. Movie ratings from IMDb and Rotten Tomatoes

There are several variables that describe ratings, including IMDb ratings (`imdbRating` represents average user ratings and `imdbVotes` represents the number of user ratings), and multiple Rotten Tomatoes ratings (represented by several variables pre-fixed by `tomato`). Read up on such ratings on the web (for example [rottentomatoes.com/about](https://www.rottentomatoes.com/about) and [ www.imdb.com/help/show_leaf?votestopfaq](http:// www.imdb.com/help/show_leaf?votestopfaq)).

Investigate the pairwise relationships between these different descriptors using graphs.

```{r}
panel.cor = function(x, y, digits = 2, cex.cor, ...)
{
  usr = par("usr"); on.exit(par(usr))
  par(usr = c(0, 1, 0, 1))
  # correlation coefficient
  r = cor(x, y)
  txt = format(c(r, 0.123456789), digits = digits)[1]
  txt = paste("r= ", txt, sep = "")
  text(0.5, 0.6, txt)
  
  # p-value calculation
  p = cor.test(x, y)$p.value
  txt2 = format(c(p, 0.123456789), digits = digits)[1]
  txt2 = paste("p= ", txt2, sep = "")
  if(p<0.01) txt2 <- paste("p= ", "<0.01", sep = "")
  text(0.5, 0.4, txt2)
}

# TODO: Illustrate how ratings from IMDb and Rotten Tomatoes are related
pairs(df[complete.cases(df), c("tomatoMeter", "imdbRating")], panel = panel.smooth, upper.panel = panel.cor, main = 'Scatter plot of ImdbRating and tomatoMeter')
```

```{r}
pairs(df[complete.cases(df), c("tomatoUserRating", "imdbRating")], panel = panel.smooth, upper.panel = panel.cor, main = 'Scatter plot of ImdbRating and tomatoUserRating')
```

```{r}
pairs(df[complete.cases(df), c("tomatoUserMeter", "imdbRating")], panel = panel.smooth, upper.panel = panel.cor, main = 'Scatter plot of ImdbRating and tomatoUserMeter')
```

```{r}
#This shows that if a movie is rated more frequently on IMDB, it is also rated more often on rottentomatoes
data_pairwise1 = df[complete.cases(df), c("tomatoReviews", "imdbVotes")]
data_pairwise1 [, 1] = log(data_pairwise1 [, 1])
data_pairwise1 [, 2] = log(data_pairwise1 [, 2])
pairs(data_pairwise1, panel = panel.smooth, upper.panel = panel.cor, main = 'Scatter plot of number of tomato reviews and imdb votes')
rm(data_pairwise1)
```

```{r}
data_pairwise2 = df[complete.cases(df), c("tomatoReviews", "tomatoUserReviews")]
data_pairwise2 [, 1] = log(data_pairwise2 [, 1])
data_pairwise2 [, 2] = log(data_pairwise2 [, 2])
pairs(data_pairwise2, panel = panel.smooth, upper.panel = panel.cor, main = 'Scatter plot of number of tomato user reviews and imdb votes')
rm(data_pairwise2)
```

```{r}
pairs(df[complete.cases(df), c("imdbVotes", "imdbRating")], panel = panel.smooth, upper.panel = panel.cor, main = 'Scatter plot of ImdbRating and tomato user Rating')
cat("Movies whose score is high are reviewed more often. In other words,if better movies get more reviews ", file = "")
```

There is definately a relationship between tomatoMeter and IMDB. tomatoMeter is acquired by professional critics, IMDB values are acquored by regular users. We can say that Users' views about the movies allign with the views of the critics. The correlation between imdbRating and Rottentomotometer is o.77, which is a strong correlation. In Rottentomatoes, users can also review movies. The user reviews on rotten tomatoes and user reviews on imdb are strongly correlated with a correlation coefficient of 0.80. The correlation between the tomatoUserMeter and imdbRating is very strong,(0.84 correlation). This proves that users on IMDB and Rottentomatoes give pretty much similar scores to the same movies. I also checked how Userratings change given the number of reviews. So It is seen that the better movies (Movies with better scores) tend to get more reviews. The movies with low scores do not get a lot of reviews.



## 8. Ratings and awards

These ratings typically reflect the general appeal of the movie to the public or gather opinions from a larger body of critics. Whereas awards are given by professional societies that may evaluate a movie on specific attributes, such as artistic performance, screenplay, sound design, etc.

Study the relationship between ratings and awards using graphs (awards here refers to wins and/or nominations). 

```{r}
# TODO: Show how ratings and awards are related
# Correlation between tomatoMeter and Wins
ggplot(data = df, aes(x = tomatoMeter, y = Win)) + geom_point() + ylim(1, 50) +  labs(title = "Scatter plot of tomatometer vs number of Wins", x ='tomatoMeter', y = 'Win')
cat("The correlation between tomatoMeter and the number of Wins is", cor(df[complete.cases(df), c("tomatoMeter", "Win")])[1,2], "\nThis means that we do not have great evidence to suggest that movies with better reviews will get more wins,", file = "")

```

```{r}
# Correlation between tomatoMeter and Nomination
ggplot(data = df, aes(x = tomatoMeter, y = Nomination)) + geom_point() + ylim(1, 50) + labs(title = "Scatter plot of tomatometer vs number of Nominations", x ='tomatoMeter', y = 'Nomination')
cat("The correlation between tomatoMeter and the number of Nominations is", cor(df[complete.cases(df), c("tomatoMeter", "Nomination")])[1,2], file = "")
```

```{r}
# Correlation between imdbRating and Win
ggplot(data = df, aes(x = imdbRating, y = Win)) + geom_point() + ylim(1, 50) + labs(title = "Scatter plot of imdbRating vs number of Wins", x ='imdbRating', y = 'Wins')
cat("The correlation between imdbrating and the number of Wins is", cor(df[complete.cases(df), c("imdbRating", "Win")])[1,2], file = "")
```

```{r}
# Correlation between imdbRating and Nomination
ggplot(data = df, aes(x = imdbRating, y = Nomination)) + geom_point() + ylim(1, 50) + labs(title = "Scatter plot of imdbRating vs number of Nominations", x ='imdbRating', y = 'Nomination')
cat("The correlation between imdbRating and the number of Nominations is", cor(df[complete.cases(df), c("imdbRating", "Nomination")])[1,2], file = "")
```

```{r}
# Correlation between tomatoUserRating and  win
ggplot(data = df, aes(x = tomatoUserRating, y = Win)) + geom_point() + ylim(1, 50) + labs(title = "Scatter plot of tomatoUserRating vs number of Wins", x ='tomatoUserRating', y = 'Wins')
cat("The correlation between tomatoUserRating and the number of Wins is", cor(df[complete.cases(df), c("tomatoUserRating", "Win")])[1,2], file = "")
```

```{r}
# Correlation between tomatoUserRating and  Nomination
ggplot(data = df, aes(x = tomatoUserRating, y = Nomination)) + geom_point() + ylim(1, 50) + labs(title = "Scatter plot of tomatoUserRating vs number of Nominations", x ='tomatoUserRating', y = 'Nominations')
cat("The correlation between tomatoUserRating and the number of Wins is", cor(df[complete.cases(df), c("tomatoUserRating", "Nomination")])[1,2], file = "")
```


The correlation between tomatoMeter and the number of Wins is 0.3734719. This means that we do not have great evidence to suggest that movies with better reviews will get more wins. The correlation between tomatoMeter and Nominations is 40%, which means a correlation exists even though it is not strong. So I would say When the tomatoMeter of a movie increases, the chance that a movie will get more nominations will also increase. I used other rating indicators, they all give pretty much the same result. There is a relationshio and correlation between the number of wins, nominations and movie ratings. This relation is  not very strong. However, we can say that it is likely that movies with better reviews i=will have a better chance of getting awards or nominated.  




## 9. Expected insights

Come up with two new insights (backed up by data and graphs) that is expected. Here “new” means insights that are not an immediate consequence of one of the above tasks. You may use any of the columns already explored above or a different one in the dataset, such as `Title`, `Actors`, etc.

```{r}
# TODO: Find and illustrate two expected insights
Genre = df[,which(colnames(df)=="action"):(ncol(df)-3)]
Genre$Win = df$Win
Genre = Genre[complete.cases(Genre), ]
Genre = Genre[Genre$Win!=0, ]
win_genre = melt(Genre, id = 'Win')
win_genre = win_genre[win_genre$value == 1, ]
win_genre = win_genre[which(win_genre$variable %in% ten_common_genre$Genre), ]
wins_by_genre = aggregate(. ~ variable, data=win_genre[,1:2], sum)
wins_by_genre_ordered = wins_by_genre[order(-wins_by_genre$Win), ]
wins_by_genre_ordered
cat(" drama and comedy are the most awarded Genres ", file = "")
# Let's incorporate the number of movies by Genre into this calculation
ten_common_genre = ten_common_genre[order(ten_common_genre$Genre),]
wins_by_genre[, 2] = wins_by_genre[, 2] / ten_common_genre[, 1]
wins_by_genre[order(-wins_by_genre$Win),]
```

```{r}
Genre = df[,which(colnames(df)=="action"):(ncol(df)-3)]
Genre$Nomination = df$Nomination
Genre = Genre[complete.cases(Genre), ]
Genre = Genre[Genre$Nomination!=0, ]
Nomination_genre = melt(Genre, id = 'Nomination')
Nomination_genre = Nomination_genre[Nomination_genre$value == 1, ]
Nomination_genre = Nomination_genre[which(Nomination_genre$variable %in% ten_common_genre$Genre), ]
Nomination_by_genre = aggregate(. ~ variable, data=Nomination_genre[,1:2], sum)
Nomination_by_genre_ordered = Nomination_by_genre[order(-Nomination_by_genre$Nomination), ]
Nomination_by_genre_ordered
cat(" drama and comedy are the most Nominated Genres ", file = "")
# Let's incorporate the number of movies by Genre into this calculation
ten_common_genre = ten_common_genre[order(ten_common_genre$Genre),]
Nomination_by_genre[, 2] = Nomination_by_genre[, 2] / ten_common_genre[, 1]
Nomination_by_genre[order(-Nomination_by_genre$Nomination),]

```



Drama and comedy are the most awarded Genres. However, when we normalize the wins by using the movie count, we see that adventure, drama, romance, and crime are the most award winning Genres. Comedy does not win a lot of award. The short Genre does not win a Lot of awards. 


In the first sight, Drama and commedy Genres seem the most Nominated Genres. When we normalize these values. We see that Adventure, drama, action, and romance are the most nominated Genres. What is interesting is the Romance Genre is nomintaed lessfrequently than the  Action Genre; however, the Romance Genre gets more wins than the Action Genre. 



```{r}
# TODO: Find and illustrate one unexpected insight
ggplot(data = df, aes(x = Budget^0.5, y = Nomination)) + geom_point() + ylim(1, 50) + labs(title = "Scatter plot of Budget vs Nomination", x ='budget', y = 'Nominations')
cor(df[complete.cases(df), c("Budget", "Nomination")])

ggplot(data = df, aes(x = Budget^0.5, y = Win)) + geom_point() + ylim(1, 50) + labs(title = "Scatter plot of Budget vs Wins", x ='budget', y = 'Wins')
cor(df[complete.cases(df), c("Budget", "Win")])

```

I was expecting that the Budget and Nomination variables, as well as the Budget and Win variables must be strongly correlated. However, this does not seem so. For example, the correlation between the number of wins and budget is 0.11. This means, just because producers spend more money does not mean that the movie will get more wins. It is also teu that expensive movies do not neccessairly get more awards.

